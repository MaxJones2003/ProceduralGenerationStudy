#pragma kernel March
#include "/Includes/MarchTables.compute"
static const uint numThreads = 8;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;

int numPointsPerAxis;
float isoLevel;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}
[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPointsPerAxis-1 || id.y >= numPointsPerAxis-1 || id.z >= numPointsPerAxis-1) {
        return;
    }
    
    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };
    
    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;
    
    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];
        
        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];
        
        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];
        
        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        triangles.Append(tri);
    }
    
    
}

/* RWStructuredBuffer<float> _Weights;

float _IsoLevel;
int _numOfPointsXAxis = 16;
int _numOfPointsYAxis = 16;
int _numOfPointsZAxis = 16;

struct Triangle
{
    float3 a, b, c;
};

AppendStructuredBuffer<Triangle> _Triangles;

float3 interp(float3 edgeVertex1, float valueAtVertex1, float3 edgeVertex2, float valueAtVertex2)
{
    return (edgeVertex1 + (_IsoLevel - valueAtVertex1) * (edgeVertex2 - edgeVertex1)  / (valueAtVertex2 - valueAtVertex1));
}

int indexFromCoord(int x, int y, int z)
{ 
    //return x + _ChunkSizeX * (z + _ChunkSizeZ * y);
    return z * _numOfPointsZAxis * _numOfPointsYAxis + y * _numOfPointsXAxis + x;
}

[numthreads(numThreads,numThreads,numThreads)]
void March (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _numOfPointsXAxis - 1 || id.y >= _numOfPointsYAxis - 1 || id.z >= _numOfPointsZAxis - 1)
    {
        return;
    }

    float cubeValues[8] = {
        _Weights[indexFromCoord(id.x, id.y, id.z + 1)],
        _Weights[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        _Weights[indexFromCoord(id.x + 1, id.y, id.z)],
        _Weights[indexFromCoord(id.x, id.y, id.z)],
        _Weights[indexFromCoord(id.x, id.y + 1, id.z + 1)],
        _Weights[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        _Weights[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        _Weights[indexFromCoord(id.x, id.y + 1, id.z)]
    };

    int cubeIndex = 0;
    if(cubeValues[0] < _IsoLevel) cubeIndex |= 1;
    if(cubeValues[1] < _IsoLevel) cubeIndex |= 2;
    if(cubeValues[2] < _IsoLevel) cubeIndex |= 4;
    if(cubeValues[3] < _IsoLevel) cubeIndex |= 8;
    if(cubeValues[4] < _IsoLevel) cubeIndex |= 16;
    if(cubeValues[5] < _IsoLevel) cubeIndex |= 32;
    if(cubeValues[6] < _IsoLevel) cubeIndex |= 64;
    if(cubeValues[7] < _IsoLevel) cubeIndex |= 128;

    int edges[] = triTable[cubeIndex];

    for(int i = 0; edges[i] != -1; i += 3)
    {
        // first edge lies between vertex e00 and vertex e01
        int e00 = edgeConnections[edges[i]][0];
        int e01 = edgeConnections[edges[i]][1];

        // second edge lies between vertex e10 and vertex e11
        int e10 = edgeConnections[edges[i + 1]][0];
        int e11 = edgeConnections[edges[i + 1]][1];

        // third edge lies between vertex e20 and vertex e21
        int e20 = edgeConnections[edges[i + 2]][0];
        int e21 = edgeConnections[edges[i + 2]][1];

        Triangle tri;
        tri.a = interp(cornerOffsets[e00], cubeValues[e00], cornerOffsets[e01], cubeValues[e01]) + id;
        tri.b = interp(cornerOffsets[e10], cubeValues[e10], cornerOffsets[e11], cubeValues[e11]) + id;
        tri.c = interp(cornerOffsets[e20], cubeValues[e20], cornerOffsets[e21], cubeValues[e21]) + id;
        _Triangles.Append(tri);
    }
} */